package com.vc;

public class FloydCycleDetectionAlgorithm {
	static class ListNode {
	    int val;
	    ListNode next;

	    ListNode(int val) {
	        this.val = val;
	        this.next = null;
	    }
	}

	public class DetectCycle {
	    public static boolean hasCycle(ListNode head) {
	        if (head == null || head.next == null) {
	            return false;
	        }

	        ListNode slow = head;
	        ListNode fast = head;

	        while (fast != null && fast.next != null) {
	            slow = slow.next;          // move slow by 1 step
	            fast = fast.next.next;     // move fast by 2 steps

	            if (slow == fast) {        // if they meet, cycle exists
	                return true;
	            }
	        }
	        return false; // if fast reaches null â†’ no cycle
	    }

	    public static void main(String[] args) {
	        // Example: create linked list with cycle
	        ListNode head = new ListNode(1);
	        head.next = new ListNode(2);
	        head.next.next = new ListNode(3);
	        head.next.next.next = new ListNode(4);
	        head.next.next.next.next = head.next; // creating a cycle

	        if (hasCycle(head)) {
	            System.out.println("Cycle detected in Linked List!");
	        } else {
	            System.out.println("No cycle in Linked List.");
	        }
	    }
	}


}
