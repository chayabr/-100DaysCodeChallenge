package com.vc;

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}
public class Merge2sortedlinkedlists {
	 public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
	        // Dummy node to build the result list
	        ListNode dummy = new ListNode(-1);
	        ListNode current = dummy;

	        // Traverse both lists
	        while (l1 != null && l2 != null) {
	            if (l1.val <= l2.val) {
	                current.next = l1;
	                l1 = l1.next;
	            } else {
	                current.next = l2;
	                l2 = l2.next;
	            }
	            current = current.next;
	        }

	        // Attach remaining nodes
	        if (l1 != null) current.next = l1;
	        if (l2 != null) current.next = l2;

	        return dummy.next; // Head of merged sorted list
	    }

	    // Utility to print a linked list
	    public static void printList(ListNode head) {
	        while (head != null) {
	            System.out.print(head.val + " -> ");
	            head = head.next;
	        }
	        System.out.println("null");
	    }
	
    // Example run
    public static void main(String[] args) {
        // List 1: 1 -> 3 -> 5
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        // List 2: 2 -> 4 -> 6
        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        ListNode merged = mergeTwoLists(l1, l2);
        printList(merged); // Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null
    }
}
